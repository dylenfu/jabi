archivesBaseName = 'core'

ext {
    akkaVersion = '2.5.13'
    ethjVersion = '1.8.0-RELEASE'
}

repositories {
    maven { url 'https://dl.bintray.com/ethereum/maven/' }
    maven { url 'https://dl.bintray.com/akka/maven/' }
    maven { url 'https://mvnrepository.com/artifact/com.alibaba/druid' }
    maven { url 'https://mvnrepository.com/artifact/org.mybatis/mybatis-spring' }
    maven { url 'https://mvnrepository.com/artifact/io.shardingsphere/sharding-jdbc' }
    maven { url 'https://mvnrepository.com/artifact/org.projectlombok/lombok' }
}

dependencies {
    compile(
        "org.ethereum:ethereumj-core:$ethjVersion",
        'com.google.inject:guice:4.1.0',

        // mysql
        'org.mybatis:mybatis:3.4.6',
        'mysql:mysql-connector-java:6.0.6',
        'com.alibaba:druid:1.1.10',
        'org.mybatis:mybatis-spring:1.3.2',
        'com.dangdang:sharding-jdbc-core:1.5.4',
        'com.dangdang:sharding-jdbc-config-spring:1.5.4',

        'org.projectlombok:lombok:1.16.20',

        // akka
        "com.typesafe.akka:akka-cluster_2.12:$akkaVersion",
        "com.typesafe.akka:akka-cluster-sharding_2.12:$akkaVersion",
        "com.typesafe.akka:akka-distributed-data_2.12:$akkaVersion",
        "com.typesafe.akka:akka-actor_2.12:$akkaVersion",
        "com.typesafe.akka:akka-testkit_2.12:$akkaVersion",
        "com.typesafe.akka:akka-stream_2.12:$akkaVersion",
        "com.typesafe.akka:akka-stream-testkit_2.12:$akkaVersion",
        "com.typesafe.akka:akka-persistence_2.12:$akkaVersion"
    )
}

//    task jarWithoutResources(type: Jar) {
//        baseName project.name
//        from
//        from("$buildDir/classes/main")
//    }
//
//    war{
//        dependsOn jarWithoutResources
//        from("$projectDir/src/main/resources") {
//            include "*.properties"
//            into("WEB-INF/classes")
//        }
//        classpath=classpath - sourceSets.main.output
//        classpath fileTree(dir:libsDir, include:"${project.name}-${version}.jar")
//    }
//
//    task('jarPath')<<{
//        configurations.runtime.resolve().each {
//            print it.toString()+";"
//        }
//        println();
//    }