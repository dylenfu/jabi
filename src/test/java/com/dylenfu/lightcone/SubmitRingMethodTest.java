/*

  Copyright 2017 Loopring Project Ltd (Loopring Foundation).

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

*/

package com.dylenfu.lightcone;

import com.dylenfu.lightcone.abi.SubmitRingMethod;
import com.google.inject.Injector;
import org.apache.log4j.Logger;
import org.junit.Test;
import org.spongycastle.util.encoders.Hex;

import static junit.framework.TestCase.assertEquals;

/**
 *       所有动态数组都有offset,跟随input所在顺序
 *       如下为submitRing的input参数,按照32byte切分后得到的数据,
 *       index:0为addressList [][4]common.Address在input中的offset,0x120->288,
 *       查找到index:288为2,这个2代表该动态数组里有两个元素,元素为address[4]的静态数组
 *       index:320~index:544为对应的address地址
 *       此外,即便是一维的动态数组,同样包含offset,我们可以参考0x协议对应的function中包含的v,s,r:
 *       https://etherscan.io/tx/0xe393b6654bc465c90b0e8cdf1e44faf40aadcb550b3f724af64e7a55f9506dab
 *       一维的静态数组不包含offset,这里我们可以参考0x协议中对应的tx:
 *       https://etherscan.io/tx/0x445817421ee7cf8ad7cc2b1c33f7c0199c15d8834f67e381b067787230f36875
 *       总结:
 *       动态数组包含offset,静态数组只包含size
 *
 *  type SubmitRingMethodInputs struct {
 * 	    AddressList        [][4]common.Address `fieldName:"addressList" fieldId:"0"`   // owner,tokenS, wallet, authAddress
 * 	    UintArgsList       [][6]*big.Int       `fieldName:"uintArgsList" fieldId:"1"`  // amountS, amountB, validSince (second),validUntil (second), lrcFee, rateAmountS.
 * 	    Uint8ArgsList      [][1]uint8          `fieldName:"uint8ArgsList" fieldId:"2"` // marginSplitPercentageList
 * 	    BuyNoMoreThanBList []bool              `fieldName:"buyNoMoreThanAmountBList" fieldId:"3"`
 * 	    VList              []uint8             `fieldName:"vList" fieldId:"4"`
 * 	    RList              [][32]byte          `fieldName:"rList" fieldId:"5"`
 * 	    SList              [][32]byte          `fieldName:"sList" fieldId:"6"`
 * 	    FeeRecipient       common.Address      `fieldName:"feeRecipient" fieldId:"7"`
 * 	    FeeSelections      uint16              `fieldName:"feeSelections" fieldId:"8"`
 * 	    Protocol           common.Address
 * 	    FeeReceipt         common.Address
 *  }
 *
 *  unpack_test.go:70: index:0 -> 0x0000000000000000000000000000000000000000000000000000000000000120
 * 	unpack_test.go:70: index:32 -> 0x0000000000000000000000000000000000000000000000000000000000000240
 * 	unpack_test.go:70: index:64 -> 0x00000000000000000000000000000000000000000000000000000000000003e0
 * 	unpack_test.go:70: index:96 -> 0x0000000000000000000000000000000000000000000000000000000000000440
 * 	unpack_test.go:70: index:128 -> 0x00000000000000000000000000000000000000000000000000000000000004a0
 * 	unpack_test.go:70: index:160 -> 0x0000000000000000000000000000000000000000000000000000000000000540
 * 	unpack_test.go:70: index:192 -> 0x00000000000000000000000000000000000000000000000000000000000005e0
 * 	unpack_test.go:70: index:224 -> 0x000000000000000000000000b94065482ad64d4c2b9252358d746b39e820a582
 * 	unpack_test.go:70: index:256 -> 0x0000000000000000000000000000000000000000000000000000000000000000
 * 	unpack_test.go:70: index:288 -> 0x0000000000000000000000000000000000000000000000000000000000000002
 * 	unpack_test.go:70: index:320 -> 0x000000000000000000000000f1bd6422e4420cfd9759f660d739d102328187a5
 * 	unpack_test.go:70: index:352 -> 0x000000000000000000000000ef68e7c694f40c8202821edf525de3782458639f
 * 	unpack_test.go:70: index:384 -> 0x000000000000000000000000b94065482ad64d4c2b9252358d746b39e820a582
 * 	unpack_test.go:70: index:416 -> 0x0000000000000000000000008c4f5e19695fbbfd92d027c1d9ef35a296d539c9
 * 	unpack_test.go:70: index:448 -> 0x000000000000000000000000a3ae668b6239fa3eb1dc26daabb03f244d0259f0
 * 	unpack_test.go:70: index:480 -> 0x000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
 * 	unpack_test.go:70: index:512 -> 0x000000000000000000000000b94065482ad64d4c2b9252358d746b39e820a582
 * 	unpack_test.go:70: index:544 -> 0x000000000000000000000000dd859de34ff674050b4961aa51aa74467cb0f03a
 * 	......
 */

public class SubmitRingMethodTest {

    @Test
    public void unpackTest() {

        Injector injector = Common.getInjector();
        String originInput = "e78aadb20000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000044000000000000000000000000000000000000000000000000000000000000004a0000000000000000000000000000000000000000000000000000000000000054000000000000000000000000000000000000000000000000000000000000005e00000000000000000000000005552dcfba48c94544beaaf26470df9898e050ac2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000004175015b30ff8d116989cdf61f4c7dba15d422ff000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000b94065482ad64d4c2b9252358d746b39e820a58200000000000000000000000090a16f7264897b325009e4040c374e6f13cee30e000000000000000000000000897b12870a0490adc56c8cc57ff0a404be35b6280000000000000000000000001b793e49237758dbd8b752afc9eb4b329d5da016000000000000000000000000b94065482ad64d4c2b9252358d746b39e820a5820000000000000000000000001e702595814d05358067a41f8716d553b8492ca500000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000032dbac9a2e6f08000000000000000000000000000000000000000000000003e15283235ae89440000000000000000000000000000000000000000000000000000000000005b2f6c15000000000000000000000000000000000000000000000000000000005b56f91500000000000000000000000000000000000000000000000918b15af51e8c00000000000000000000000000000000000000000000000000032dbac9a2e6f080000000000000000000000000000000000000000000000012a27d53bc0487000000000000000000000000000000000000000000000000000000f43fc2c04ee00000000000000000000000000000000000000000000000000000000000005b557953000000000000000000000000000000000000000000000000000000005b56cad30000000000000000000000000000000000000000000000032c4454e50f9d00000000000000000000000000000000000000000000000012a27d53bcc000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001b0000000000000000000000000000000000000000000000000000000000000004a58f7592f40145b2f08aae392eb2f3977dd62135d2e5e5ed85fa54ac7e18700154f815446924000545a89081f23f401091e1ba846bad04e8f1ca9ddae96c4d1a5a62d331e93de11b1494a6e3d4c7b251005617d026ac2929ef72f3259d94fa5532328de3016aeb0baafcc65d09fdeda093ca9d5b51721f1eb78f3799f4e2184600000000000000000000000000000000000000000000000000000000000000046f6bed699b5fc3c386d04bc1fbbbbc289c6316517b3b8506415a0668dc0063133b408b904a1df09f3642af3130060e2d678989617e3e56dcc44dd69652e8e27f144bd8ffee74d52872863b6a72f6d6757ffc35ae900b95c59642111c7c77b7860e26b6d82ab8f007c8c910df86cfd3eba70ecdbae59505a400febaa7e9f609d6";
        byte[] input = Hex.decode("000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000044000000000000000000000000000000000000000000000000000000000000004a0000000000000000000000000000000000000000000000000000000000000054000000000000000000000000000000000000000000000000000000000000005e00000000000000000000000005552dcfba48c94544beaaf26470df9898e050ac2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000004175015b30ff8d116989cdf61f4c7dba15d422ff000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000b94065482ad64d4c2b9252358d746b39e820a58200000000000000000000000090a16f7264897b325009e4040c374e6f13cee30e000000000000000000000000897b12870a0490adc56c8cc57ff0a404be35b6280000000000000000000000001b793e49237758dbd8b752afc9eb4b329d5da016000000000000000000000000b94065482ad64d4c2b9252358d746b39e820a5820000000000000000000000001e702595814d05358067a41f8716d553b8492ca500000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000032dbac9a2e6f08000000000000000000000000000000000000000000000003e15283235ae89440000000000000000000000000000000000000000000000000000000000005b2f6c15000000000000000000000000000000000000000000000000000000005b56f91500000000000000000000000000000000000000000000000918b15af51e8c00000000000000000000000000000000000000000000000000032dbac9a2e6f080000000000000000000000000000000000000000000000012a27d53bc0487000000000000000000000000000000000000000000000000000000f43fc2c04ee00000000000000000000000000000000000000000000000000000000000005b557953000000000000000000000000000000000000000000000000000000005b56cad30000000000000000000000000000000000000000000000032c4454e50f9d00000000000000000000000000000000000000000000000012a27d53bcc000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001b0000000000000000000000000000000000000000000000000000000000000004a58f7592f40145b2f08aae392eb2f3977dd62135d2e5e5ed85fa54ac7e18700154f815446924000545a89081f23f401091e1ba846bad04e8f1ca9ddae96c4d1a5a62d331e93de11b1494a6e3d4c7b251005617d026ac2929ef72f3259d94fa5532328de3016aeb0baafcc65d09fdeda093ca9d5b51721f1eb78f3799f4e2184600000000000000000000000000000000000000000000000000000000000000046f6bed699b5fc3c386d04bc1fbbbbc289c6316517b3b8506415a0668dc0063133b408b904a1df09f3642af3130060e2d678989617e3e56dcc44dd69652e8e27f144bd8ffee74d52872863b6a72f6d6757ffc35ae900b95c59642111c7c77b7860e26b6d82ab8f007c8c910df86cfd3eba70ecdbae59505a400febaa7e9f609d6");
        SubmitRingMethod method = injector.getInstance(SubmitRingMethod.class);

        method.setInput(input);
        byte[] packedInput = {};
        try {
            method.unpack();
            packedInput = method.pack();
        } catch (Exception e) {
            injector.getInstance(Logger.class).debug(e.getMessage());
        }

        assertEquals(originInput, Hex.toHexString(packedInput));
    }
}
